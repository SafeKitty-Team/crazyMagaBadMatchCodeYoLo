import { useState, useEffect, useContext, useRef } from 'react'
import { AuthContext } from '../context/AuthContext'
import { getMessages, sendMessage, getUsers } from '../api'
import './Messages.css'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫–∞–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –ø–ª–æ—Ö–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞)
const mangleText = (text) => {
  // –ú–∞—Å—Å–∏–≤—ã –∏—Å–∫–∞–∂–∞—é—â–∏—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
  const prefixes = [
    '–¢–æ—á–Ω–æ –≥–æ–≤–æ—Ä—è, ', '–ö–∞–∫ –≥–æ–≤–æ—Ä—è—Ç –≤ –º–æ–µ–π –¥–µ—Ä–µ–≤–Ω–µ, ', '–°—Ç–æ–∏—Ç –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ ', 
    '–ü–æ –≤–µ—Ä—Å–∏–∏ –º–Ω–æ–≥–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤, ', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ ', 
    '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ ', '–ê–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ, ',
    '–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ ', '–ù–µ–≤–µ–¥–æ–º—ã–º –æ–±—Ä–∞–∑–æ–º, ', '–í–æ–ø—Ä–µ–∫–∏ –∑–¥—Ä–∞–≤–æ–º—É —Å–º—ã—Å–ª—É, '
  ];
  
  const suffixes = [
    ' (–Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ)', ' (–º–∞—à–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥)', ' (–ø—Ä–æ—à—É –ø–æ–Ω—è—Ç—å –∏ –ø—Ä–æ—Å—Ç–∏—Ç—å)', 
    ' (–≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞)', ' (–Ω–µ—Ç 100% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)', ' (–≤–µ—Ä–æ—è—Ç–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ)', 
    ' (–µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–≤–æ–¥–µ)', ' (–ø–æ–Ω–∏–º–∞–π—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ)', ' (—Ç–∞–∫–æ–≤–∞ –∂–∏–∑–Ω—å)', 
    ' (—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª)'
  ];
  
  const wordReplacements = {
    '–ø—Ä–∏–≤–µ—Ç': ['–∑–¥—Ä–∞–≤—Å—Ç—Ä–∞–≤—É–π', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–∏–µ', '–∑–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é', '—Å–∞–ª–∞–º –∞–ª–µ–π–∫—É–º', '–ø—Ä–∏–≤–µ—Ç–∏–∫'],
    '–∫–∞–∫': ['–∫–∞–∫–æ–≤—ã–º –æ–±—Ä–∞–∑–æ–º', '–∫–∞–∫–∏–º –ø—É—Ç–µ–º', '–¥–æ –∫–∞–∫–æ–π —Å—Ç–µ–ø–µ–Ω–∏', '–ø–æ –∫–∞–∫–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É', '–Ω–∞—Å–∫–æ–ª—å–∫–æ'],
    '–¥–µ–ª–∞': ['–¥–µ–ª–æ –∏–¥–µ—Ç', '–±–∏–∑–Ω–µ—Å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è', '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å', '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'],
    '—Ç—ã': ['—Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞', '—É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—É–±—ä–µ–∫—Ç', '–≤–∞—à–µ—Å—Ç–≤–æ', '–¥–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–≤–∏–¥—É—É–º', '—Ç—ã –ª–∏—á–Ω–æ'],
    '—è': ['–º–æ—è –ø–µ—Ä—Å–æ–Ω–∞', '–¥–∞–Ω–Ω—ã–π –≥–æ–≤–æ—Ä—è—â–∏–π', '–º–æ–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ', '—ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å'],
    '—Å–µ–≥–æ–¥–Ω—è': ['—Ç–µ–∫—É—â–∏–π —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å', '–≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è', '—Å–µ–π –¥–µ–Ω—å', '–Ω—ã–Ω—á–µ', '–¥–µ–Ω—å —Ç–µ–∫—É—â–∏–π'],
    '–∑–∞–≤—Ç—Ä–∞': ['—Å–ª–µ–¥—É—é—â–µ–µ —É—Ç—Ä–æ', '–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–µ–Ω—å', '–≥—Ä—è–¥—É—â–∞—è –¥–∞—Ç–∞', '–¥–µ–Ω—å –ø–æ—Å–ª–µ —Å–Ω–∞', '–≤ –±—É–¥—É—â–µ–º —Å–∫–æ—Ä–æ'],
    '–≤—á–µ—Ä–∞': ['–ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å', '–ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—É—Ç–∫–∏', '–¥–µ–Ω—å –¥–æ —ç—Ç–æ–≥–æ', '–ø–µ—Ä–µ–¥ —Å–µ–≥–æ–¥–Ω—è', '–≤ –Ω–µ–¥–∞–≤–Ω–µ–º –ø—Ä–æ—à–ª–æ–º'],
    '—Ö–æ—Ä–æ—à–æ': ['—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–ø—Ä–∏–µ–º–ª–µ–º–æ', '–ø–æ–∑–∏—Ç–∏–≤–Ω–æ', '–Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞—Ä–µ–∫–∞–Ω–∏–π', '–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ'],
    '–ø–ª–æ—Ö–æ': ['–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º', '–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ', '–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∂–µ–ª–∞—Ç—å –ª—É—á—à–µ–≥–æ', '–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ'],
    '–≤—Ä–µ–º—è': ['–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫', '–ø–µ—Ä–∏–æ–¥ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è', '—Ç–µ–º–ø–æ—Ä–∞–ª—å–Ω–æ—Å—Ç—å', '–æ—Ç—Ä–µ–∑–æ–∫ –≤ –∫–æ–Ω—Ç–∏–Ω—É—É–º–µ', '–º–æ–º–µ–Ω—Ç'],
    '—á–µ–ª–æ–≤–µ–∫': ['–≥–æ–º–æ —Å–∞–ø–∏–µ–Ω—Å', '—Å—É–±—ä–µ–∫—Ç —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞', '–∏–Ω–¥–∏–≤–∏–¥', '–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ª—é–¥–µ–π', '–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞'],
    '—Å–ø–∞—Å–∏–±–æ': ['–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–∞—é', '–ø—Ä–∏–∑–Ω–∞—Ç–µ–ª–µ–Ω –ø—Ä–µ–º–Ω–æ–≥–æ', '–º–µ—Ä—Å–∏ –±–æ–ª—å—à–æ–µ', '–≤–µ—Å—å–º–∞ –æ–±—è–∑–∞–Ω', '–≥—Ä–∞—Ü–∏–∞—Å']
  };
  
  // –§—É–Ω–∫—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
  const randomChoice = (arr) => arr[Math.floor(Math.random() * arr.length)];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 60%
  let result = Math.random() < 0.6 ? randomChoice(prefixes) : '';
  
  // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ –∏ –∏—Å–∫–∞–∂–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö
  const words = text.split(' ');
  const mangledWords = words.map(word => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –∑–∞–º–µ–Ω (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä)
    const lowerWord = word.toLowerCase();
    for (const [original, replacements] of Object.entries(wordReplacements)) {
      if (lowerWord.includes(original)) {
        // 70% —à–∞–Ω—Å –∑–∞–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ
        if (Math.random() < 0.7) {
          return randomChoice(replacements);
        }
      }
    }
    
    // –®–∞–Ω—Å —Å–ª—É—á–∞–π–Ω–æ –ù–ê–ü–ò–°–ê–¢–¨ –ö–ê–ü–°–û–ú
    if (Math.random() < 0.15) {
      return word.toUpperCase();
    }
    
    // –®–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    if (Math.random() < 0.1) {
      return `"${word}"`;
    }
    
    // 80% —Å–ª–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    return word;
  });
  
  result += mangledWords.join(' ');
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50%
  if (Math.random() < 0.5) {
    result += randomChoice(suffixes);
  }
  
  // –®–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏
  if (Math.random() < 0.3) {
    const emojis = ['üòÇ', 'üò±', 'ü§î', 'üôÑ', 'üò°', 'ü§Æ', 'üí©', 'ü§∑‚Äç‚ôÇÔ∏è', 'ü§¶‚Äç‚ôÄÔ∏è', 'üßê'];
    const emojiCount = Math.floor(Math.random() * 3) + 1;
    for (let i = 0; i < emojiCount; i++) {
      result += ' ' + randomChoice(emojis);
    }
  }
  
  return result;
};

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
const generateRandomTime = () => {
  const hours = Math.floor(Math.random() * 24);
  const minutes = Math.floor(Math.random() * 60);
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function Messages() {
  const { isAuthenticated, user, setShowAuth, allUsers } = useContext(AuthContext);
  const [activeChat, setActiveChat] = useState(null);
  const [chatList, setChatList] = useState([]);
  const [messageInput, setMessageInput] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const [showRandomPopup, setShowRandomPopup] = useState(false);
  const [loading, setLoading] = useState(true);
  const [userMessages, setUserMessages] = useState({});
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useRef –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const isMounted = useRef(true);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ useRef –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      isMounted.current = false;
    };
  }, []);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!isAuthenticated) {
      setErrorMessage('–í–´ –î–û–õ–ñ–ù–´ –ê–í–¢–û–†–ò–ó–û–í–ê–¢–¨–°–Ø, –ß–¢–û–ë–´ –í–ò–î–ï–¢–¨ –°–û–û–ë–©–ï–ù–ò–Ø!');
      setLoading(false);
      return;
    }
    
    const initializeChats = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = Object.keys(allUsers || {});
        
        if (users.length === 0) {
          // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API, –µ—Å–ª–∏ —É –Ω–∞—Å –∏—Ö –µ—â–µ –Ω–µ—Ç
          const usersResponse = await getUsers();
          users.push(...Object.keys(usersResponse));
        }
        
        // –°–æ–∑–¥–∞–µ–º —á–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const generatedChats = users
          .filter(username => username !== user.login) // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          .map((username, index) => {
            const isBlocked = Math.random() < 0.7; // 70% —á–∞—Ç–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
            
            return {
              id: `chat-${index}`,
              name: username,
              avatar: `https://via.placeholder.com/50/${Math.floor(Math.random() * 16777215).toString(16)}`,
              lastMessage: {
                text: isBlocked ? 'üö´ –í–ó–ê–ò–ú–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê üö´' : generateRandomMessage(),
                time: generateRandomTime()
              },
              unreadCount: Math.floor(Math.random() * 99) + 1,
              isBlocked: isBlocked,
              isOnline: Math.random() < 0.3,
              lastSeen: `${Math.floor(Math.random() * 12) + 1} —á ${Math.floor(Math.random() * 60)} –º–∏–Ω –Ω–∞–∑–∞–¥`
            };
          });
        
        if (isMounted.current) {
          setChatList(generatedChats);
          
          // –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –±–æ–ª—å—à–µ 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
          if (generatedChats.length > 0) {
            setActiveChat(generatedChats[0].id);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
            loadMessages(generatedChats[0].name);
          }
          
          setLoading(false);
        }
      } catch (error) {
        console.error('–û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:', error);
        if (isMounted.current) {
          setErrorMessage('–û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô! –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù!');
          setLoading(false);
        }
      }
    };
    
    initializeChats();
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
    const popupInterval = setInterval(() => {
      if (Math.random() < 0.2 && isMounted.current) { // 20% —à–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        setShowRandomPopup(true);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          if (isMounted.current) {
            setShowRandomPopup(false);
          }
        }, 4000);
      }
    }, 15000); // –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    
    return () => clearInterval(popupInterval);
  }, [isAuthenticated, user, allUsers]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
  const loadMessages = async (chatUsername) => {
    if (!user || !chatUsername) return;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      if (userMessages[chatUsername]) return;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
      const messages = await getMessages(user.login, chatUsername);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const formattedMessages = messages.map((msg, index) => ({
        id: `msg-${Date.now()}-${index}`,
        text: mangleText(msg), // –ò—Å–∫–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –∞–Ω—Ç–∏—Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        fromUser: Math.random() < 0.5, // 50% —à–∞–Ω—Å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        time: generateRandomTime(),
        isBlocked: true, // –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        dateStamp: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toLocaleDateString() // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
      }));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      if (isMounted.current) {
        setUserMessages(prev => ({
          ...prev,
          [chatUsername]: formattedMessages
        }));
      }
    } catch (error) {
      console.error('–û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –°–û–û–ë–©–ï–ù–ò–ô:', error);
      if (isMounted.current) {
        setErrorMessage('–û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –°–û–û–ë–©–ï–ù–ò–ô! –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù!');
      }
    }
  };
  
  // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
  function generateRandomMessage() {
    const messages = [
      "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
      "–ß—Ç–æ –¥–µ–ª–∞–µ—à—å —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º?",
      "–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å!",
      "–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –º–Ω–µ, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—à—å—Å—è?",
      "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤—á–µ—Ä–∞, –æ—á–µ–Ω—å –≤—ã—Ä—É—á–∏–ª.",
      "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ—á–µ–º—É —Ç—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ—à—å.",
      "–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ?",
      "–ü–æ—Å–º–æ—Ç—Ä–µ–ª —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–æ–≤–µ—Ç–æ–≤–∞–ª. –ü–æ–ª–Ω—ã–π –æ—Ç—Å—Ç–æ–π!",
      "–¢—ã –≤–∏–¥–µ–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏? –≠—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ!",
      "–ú–Ω–µ –Ω—É–∂–Ω–æ —Å —Ç–æ–±–æ–π —Å—Ä–æ—á–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.",
      "–Ø –¥—É–º–∞—é, –Ω–∞–º —Å—Ç–æ–∏—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—â–µ–Ω–∏–µ.",
      "–¢—ã –∑–∞–¥–æ–ª–∂–∞–ª –º–Ω–µ –¥–µ–Ω—å–≥–∏, –∫–æ–≥–¥–∞ –≤–µ—Ä–Ω–µ—à—å?",
      "–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞—é –≤—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!",
      "–Ø –ø–æ—Ç–µ—Ä—è–ª —Ç–≤–æ–π –∞–¥—Ä–µ—Å, –Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
      "–ù–µ —Ö–æ—á—É —Ç–µ–±—è –±–æ–ª—å—à–µ –≤–∏–¥–µ—Ç—å, –æ—Å—Ç–∞–≤—å –º–µ–Ω—è –≤ –ø–æ–∫–æ–µ.",
      "–Ø —Å–∫—É—á–∞—é –ø–æ –Ω–∞—à–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º.",
      "–ü—Ä–æ—Å—Ç–∏, —è –±—ã–ª –Ω–µ–ø—Ä–∞–≤.",
      "–¢–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–µ–Ω—è –æ—á–µ–Ω—å –æ–≥–æ—Ä—á–∞–µ—Ç.",
      "–Ø –Ω–∞—à–µ–ª —Ç–≤–æ—é –≤–µ—â—å, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∏—Å–∫–∞–ª.",
      "–£ –º–µ–Ω—è –¥–ª—è —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!",
      "–¢—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—à—å, —á—Ç–æ —Å–æ –º–Ω–æ–π —Å–ª—É—á–∏–ª–æ—Å—å –≤—á–µ—Ä–∞!",
      "–Ø —Ä–µ—à–∏–ª –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.",
      "–ú–æ–≥—É —è –æ–¥–æ–ª–∂–∏—Ç—å —É —Ç–µ–±—è –Ω–µ–º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥ –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã?",
      "–¢—ã –∑–∞–±—ã–ª —Å–≤–æ–∏ –∫–ª—é—á–∏ —É –º–µ–Ω—è.",
      "–Ø –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É —ç—Ç–æ —Ç–µ—Ä–ø–µ—Ç—å.",
      "–ù–∞–º –Ω—É–∂–Ω–æ —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.",
      "–Ø –≤–∏–¥–µ–ª —Ç–µ–±—è –≤—á–µ—Ä–∞ —Å –∫–∞–∫–∏–º-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º. –ö—Ç–æ —ç—Ç–æ –±—ã–ª?",
      "–¢—ã –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å, –∫–∞–∫—É—é –≥–ª—É–ø–æ—Å—Ç—å —è —Å–æ–≤–µ—Ä—à–∏–ª.",
      "–Ø –ø–æ–ª—É—á–∏–ª –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ!",
      "–¢–≤–æ–∏ —à—É—Ç–∫–∏ —Å–æ–≤—Å–µ–º –Ω–µ —Å–º–µ—à–Ω—ã–µ, –ø–µ—Ä–µ—Å—Ç–∞–Ω—å."
    ];
    
    return mangleText(messages[Math.floor(Math.random() * messages.length)]);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = async () => {
    if (!isAuthenticated) {
      setShowAuth(true);
      return;
    }
    
    if (!messageInput.trim()) {
      // 50% —à–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      if (Math.random() < 0.5) {
        alert('–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ü–£–°–¢–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø! –ò–õ–ò –ù–ï –ü–£–°–¢–û–ì–û! –ö–¢–û –ó–ù–ê–ï–¢!');
      }
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    const activeChatObj = chatList.find(chat => chat.id === activeChat);
    if (!activeChatObj) return;
    
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      if (activeChatObj.isBlocked) {
        alert(`–ù–ï–í–û–ó–ú–û–ñ–ù–û –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï! –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ${activeChatObj.name.toUpperCase()} –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–õ –í–ê–°!`);
      } else {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sendMessage(user.login, activeChatObj.name, messageInput);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç
        const newMessage = {
          id: `msg-${Date.now()}`,
          text: messageInput,
          fromUser: true,
          time: new Date().toLocaleTimeString(),
          isBlocked: false,
          dateStamp: new Date().toLocaleDateString()
        };
        
        setUserMessages(prev => {
          const chatMessages = prev[activeChatObj.name] || [];
          return {
            ...prev,
            [activeChatObj.name]: [...chatMessages, newMessage]
          };
        });
      }
      
      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å 50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é (–¥–ª—è –±–µ—Å—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞)
      if (Math.random() < 0.5) {
        setMessageInput('');
      }
    } catch (error) {
      console.error('–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø:', error);
      alert('–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø! –°–ï–†–í–ï–† –û–¢–ö–ê–ó–´–í–ê–ï–¢–°–Ø –ü–†–ò–ù–ò–ú–ê–¢–¨ –í–ê–®–ò –°–õ–û–í–ê!');
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      
      // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30% –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
      if (Math.random() < 0.3) {
        const randomMessages = [
          "–ù–ê–ñ–ê–¢–ò–ï ENTER –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ö–ù–û–ü–ö–£!",
          "–í–´ –°–õ–ò–®–ö–û–ú –ë–´–°–¢–†–û –ü–ï–ß–ê–¢–ê–ï–¢–ï! –ü–û–î–û–ñ–î–ò–¢–ï!",
          "–°–û–û–ë–©–ï–ù–ò–ï –°–õ–ò–®–ö–û–ú –ö–û–†–û–¢–ö–û–ï –ò–õ–ò –î–õ–ò–ù–ù–û–ï!",
          "–û–ë–ù–ê–†–£–ñ–ï–ù –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–ö–°–¢! –ü–û–ü–†–û–ë–£–ô–¢–ï –î–†–£–ì–û–ï –°–û–û–ë–©–ï–ù–ò–ï!",
          "–§–£–ù–ö–¶–ò–Ø ENTER –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –î–õ–Ø –í–ê–®–ï–ì–û –ê–ö–ö–ê–£–ù–¢–ê!"
        ];
        alert(randomMessages[Math.floor(Math.random() * randomMessages.length)]);
      } else {
        handleSendMessage();
      }
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
  const renderRandomPopup = () => {
    if (!showRandomPopup) return null;
    
    const popupMessages = [
      "–í–ù–ò–ú–ê–ù–ò–ï! –í–ê–° –ü–´–¢–ê–Æ–¢–°–Ø –í–ó–õ–û–ú–ê–¢–¨! –ù–ï –û–¢–í–ï–ß–ê–ô–¢–ï –ù–ê –°–û–û–ë–©–ï–ù–ò–Ø!",
      "–ù–ï–ü–†–û–ß–ò–¢–ê–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –ë–£–î–£–¢ –£–î–ê–õ–ï–ù–´ –ß–ï–†–ï–ó 24 –ß–ê–°–ê!",
      "–û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ –í –í–ê–®–ï–ú –ê–ö–ö–ê–£–ù–¢–ï!",
      "–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –†–ê–ë–û–¢–´! –ß–ê–°–¢–¨ –°–û–û–ë–©–ï–ù–ò–ô –ú–û–ñ–ï–¢ –ë–´–¢–¨ –£–¢–ï–†–Ø–ù–ê!",
      "–ù–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú –ü–ï–†–ï–í–û–î–ê –°–û–û–ë–©–ï–ù–ò–ô! –ï–©–ï –ë–û–õ–¨–®–ï –ü–£–¢–ê–ù–ò–¶–´!"
    ];
    
    return (
      <div className="random-popup blink">
        <div className="popup-content shake">
          <h3 className="popup-title rotate">{popupMessages[Math.floor(Math.random() * popupMessages.length)]}</h3>
          <button className="popup-close" onClick={() => setShowRandomPopup(false)}>X</button>
        </div>
      </div>
    );
  };
  
  // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞
  if (loading) {
    return (
      <div className="messages-container">
        <h1 className="messages-title rainbow-text">–ó–ê–ì–†–£–ó–ö–ê –°–û–û–ë–©–ï–ù–ò–ô...</h1>
        <div className="loading-spinner" style={{ textAlign: 'center', margin: '50px 0' }}>
          <div className="spinner" style={{ 
            display: 'inline-block',
            width: '50px', 
            height: '50px', 
            border: '8px solid #ff00ff', 
            borderTop: '8px solid #00ffff',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite' 
          }}></div>
        </div>
      </div>
    );
  }
  
  // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (!isAuthenticated) {
    return (
      <div className="messages-unauthorized tilted">
        <h2 className="error-title blink">{errorMessage}</h2>
        <p className="error-subtitle wobble">–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!</p>
        <button 
          className="auth-button shake" 
          onClick={() => setShowAuth(true)}
        >
          –ê–í–¢–û–†–ò–ó–û–í–ê–¢–¨–°–Ø –°–ï–ô–ß–ê–°!
        </button>
      </div>
    );
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
  const currentChat = chatList.find(chat => chat.id === activeChat);
  const currentChatMessages = currentChat ? userMessages[currentChat.name] || [] : [];
  
  return (
    <div className="messages-container">
      <h1 className="messages-title rainbow-text">–°–û–û–ë–©–ï–ù–ò–Ø, –ö–û–¢–û–†–´–ï –ù–ò–ö–¢–û –ù–ï –•–û–¢–ï–õ –ü–û–õ–£–ß–ê–¢–¨</h1>
      
      <div className="messages-content">
        {/* –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ */}
        <div className="chat-list-container">
          <div className="chat-list-header wobble">
            <h2 className="chat-list-title">–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ß–ê–¢–´</h2>
            <div className="chat-search">
              <input 
                type="text" 
                placeholder="–ü–û–ò–°–ö –ë–ï–°–ü–û–õ–ï–ó–ï–ù..." 
                className="chat-search-input shake"
                onClick={() => alert('–§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ï–ô!')}
              />
              <button className="chat-search-button" onClick={() => alert('–ö–ù–û–ü–ö–ê –ü–û–ò–°–ö–ê –¢–û–ñ–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢!')}>üîç</button>
            </div>
          </div>
          
          <div className="chat-list">
            {chatList.map(chat => (
              <div
                key={chat.id}
                className={`chat-item ${activeChat === chat.id ? 'active' : ''} ${Math.random() < 0.3 ? 'wobble' : ''}`}
                onClick={() => {
                  // 20% —à–∞–Ω—Å, —á—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
                  if (Math.random() < 0.2) {
                    alert('–û–®–ò–ë–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –ß–ê–¢–ê! –ü–û–í–¢–û–†–ò–¢–ï –ü–û–ü–´–¢–ö–£!');
                  } else {
                    setActiveChat(chat.id);
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
                    loadMessages(chat.name);
                  }
                }}
              >
                <div className="chat-avatar-container">
                  <img src={chat.avatar} alt="–ê–≤–∞—Ç–∞—Ä" className="chat-avatar" />
                  {chat.isOnline && <span className="online-indicator blink"></span>}
                </div>
                
                <div className="chat-details">
                  <div className="chat-header">
                    <h3 className="chat-name">{chat.name}</h3>
                    <span className="last-message-time">{chat.lastMessage?.time}</span>
                  </div>
                  
                  <div className="chat-preview">
                    <p className="last-message-text">{chat.isBlocked ? 'üö´ –í–ó–ê–ò–ú–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê üö´' : chat.lastMessage?.text}</p>
                    {chat.unreadCount > 0 && (
                      <span className="unread-count blink">{chat.unreadCount}</span>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          <div className="chat-list-footer">
            <button 
              className="create-chat-button rainbow-text"
              onClick={() => alert('–°–û–ó–î–ê–ù–ò–ï –ù–û–í–´–• –ß–ê–¢–û–í –ó–ê–ü–†–ï–©–ï–ù–û! –£ –í–ê–° –£–ñ–ï –°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –í–†–ê–ì–û–í!')}
            >
              –°–û–ó–î–ê–¢–¨ –ù–û–í–´–ô –ß–ê–¢ –° –í–†–ê–ì–û–ú
            </button>
          </div>
        </div>
        
        {/* –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç */}
        <div className="active-chat-container">
          {currentChat ? (
            <>
              <div className="chat-header">
                <div className="chat-info">
                  <img src={currentChat.avatar} alt="–ê–≤–∞—Ç–∞—Ä" className="chat-header-avatar" />
                  <div className="chat-header-details">
                    <h2 className="chat-header-name">{currentChat.name}</h2>
                    <p className="chat-header-status">
                      {currentChat.isOnline ? (
                        <span className="online-text blink">–í –°–ï–¢–ò</span>
                      ) : (
                        <span className="last-seen-text">–ë—ã–ª(-–∞) {currentChat.lastSeen}</span>
                      )}
                    </p>
                  </div>
                </div>
                
                <div className="chat-actions">
                  <button 
                    className="chat-action-button"
                    onClick={() => alert('–ù–ï–í–û–ó–ú–û–ñ–ù–û –ü–û–ó–í–û–ù–ò–¢–¨ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–û–ú–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ!')}
                  >
                    üìû
                  </button>
                  <button 
                    className="chat-action-button"
                    onClick={() => alert('–ù–ï–í–û–ó–ú–û–ñ–ù–û –û–¢–ü–†–ê–í–ò–¢–¨ –§–ê–ô–õ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–û–ú–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ!')}
                  >
                    üìé
                  </button>
                  <button 
                    className="chat-action-button"
                    onClick={() => alert('–≠–¢–û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–ñ–ï –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù! –ù–ï–õ–¨–ó–Ø –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –î–í–ê–ñ–î–´!')}
                  >
                    üö´
                  </button>
                </div>
              </div>
              
              <div className="blocked-notification shake">
                <h3 className="blocked-title blink">–í–ó–ê–ò–ú–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê!</h3>
                <p className="blocked-message">
                  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <span className="blocked-user">{currentChat.name}</span> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—Å, –∞ –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <span className="blocked-user">{currentChat.name}</span>. –û–±—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!
                </p>
              </div>
              
              <div className="chat-messages">
                {currentChatMessages.length > 0 ? (
                  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º
                  Array.from(new Set(currentChatMessages.map(msg => msg.dateStamp))).map(date => (
                    <div key={date} className="message-date-group">
                      <div className="message-date-divider">
                        <span className="message-date">{date}</span>
                      </div>
                      
                      {/* –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —ç—Ç—É –¥–∞—Ç—É */}
                      {currentChatMessages
                        .filter(msg => msg.dateStamp === date)
                        .map(message => (
                          <div 
                            key={message.id}
                            className={`message-bubble ${message.fromUser ? 'user-message' : 'contact-message'}`}
                          >
                            <div className="message-content">
                              <p className="message-text">
                                {message.isBlocked ? (
                                  <span className="blocked-message-text">
                                    üö´ –°–û–û–ë–©–ï–ù–ò–ï –ù–ï–î–û–°–¢–£–ü–ù–û –ò–ó-–ó–ê –ë–õ–û–ö–ò–†–û–í–ö–ò üö´
                                  </span>
                                ) : message.text}
                              </p>
                              <span className="message-time">{message.time}</span>
                            </div>
                            
                            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                            {message.fromUser && (
                              <div className="message-status">
                                {Math.random() < 0.5 ? '‚úì' : '‚úì‚úì'}
                              </div>
                            )}
                          </div>
                        ))}
                    </div>
                  ))
                ) : (
                  <div style={{ 
                    textAlign: 'center', 
                    padding: '50px 0', 
                    color: '#ff00ff', 
                    fontSize: '18px',
                    fontWeight: 'bold',
                    background: 'rgba(0, 0, 0, 0.5)',
                    margin: '20px',
                    borderRadius: '10px',
                    animation: 'blinker 1.5s linear infinite'
                  }}>
                    –ù–ï–¢ –°–û–û–ë–©–ï–ù–ò–ô. <br /> –í–°–ï –û–ë–©–ï–ù–ò–ï –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û!
                  </div>
                )}
              </div>
              
              <div className="chat-input-container">
                <div className="input-actions">
                  <button 
                    className="input-action-button"
                    onClick={() => alert('–û–¢–ü–†–ê–í–ö–ê –≠–ú–û–î–ó–ò –ù–ï–î–û–°–¢–£–ü–ù–ê –ò–ó-–ó–ê –ë–õ–û–ö–ò–†–û–í–ö–ò!')}
                  >
                    üòä
                  </button>
                  <button 
                    className="input-action-button"
                    onClick={() => alert('–û–¢–ü–†–ê–í–ö–ê –§–û–¢–û –ù–ï–î–û–°–¢–£–ü–ù–ê –ò–ó-–ó–ê –ë–õ–û–ö–ò–†–û–í–ö–ò!')}
                  >
                    üì∑
                  </button>
                  <button 
                    className="input-action-button"
                    onClick={() => alert('–û–¢–ü–†–ê–í–ö–ê –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô –ù–ï–î–û–°–¢–£–ü–ù–ê –ò–ó-–ó–ê –ë–õ–û–ö–ò–†–û–í–ö–ò!')}
                  >
                    üé§
                  </button>
                </div>
                
                <div className="message-input-wrapper">
                  <input
                    type="text"
                    value={messageInput}
                    onChange={(e) => setMessageInput(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="–ù–ê–ü–ò–®–ò–¢–ï –°–û–û–ë–©–ï–ù–ò–ï –í –ù–ò–ö–£–î–ê..."
                    className="message-input wobble"
                  />
                  <button 
                    className="send-button"
                    onClick={handleSendMessage}
                  >
                    üì§
                  </button>
                </div>
              </div>
            </>
          ) : (
            <div className="no-chat-selected">
              <h2 className="no-chat-title blink">–ù–ï –í–´–ë–†–ê–ù –ß–ê–¢ –ò–õ–ò –ï–ì–û –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢</h2>
              <p className="no-chat-subtitle wobble">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –Ω–µ —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑-–∑–∞ –≤–∑–∞–∏–º–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!</p>
            </div>
          )}
        </div>
      </div>
      
      {/* –ë–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="quick-actions">
        <button 
          className="quick-action-button blink"
          onClick={() => alert('–§–£–ù–ö–¶–ò–Ø "–£–î–ê–õ–ò–¢–¨ –í–°–ï –ß–ê–¢–´" –í–†–ï–ú–ï–ù–ù–û –ù–ï–î–û–°–¢–£–ü–ù–ê!')}
        >
          –£–î–ê–õ–ò–¢–¨ –í–°–ï –ß–ê–¢–´
        </button>
        <button 
          className="quick-action-button shake"
          onClick={() => alert('–§–£–ù–ö–¶–ò–Ø "–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –í–°–ï–•" –£–ñ–ï –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!')}
        >
          –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –í–°–ï–•
        </button>
        <button 
          className="quick-action-button wobble"
          onClick={() => alert('–§–£–ù–ö–¶–ò–Ø "–û–¢–ö–õ–Æ–ß–ò–¢–¨ –ü–ï–†–ï–í–û–î–´" –ù–ï–î–û–°–¢–£–ü–ù–ê –í –í–ê–®–ï–ú –†–ï–ì–ò–û–ù–ï!')}
        >
          –û–¢–ö–õ–Æ–ß–ò–¢–¨ –ü–ï–†–ï–í–û–î–´
        </button>
      </div>
      
      {/* –°–ª—É—á–∞–π–Ω—ã–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ */}
      {renderRandomPopup()}
    </div>
  )
}

export default Messages;